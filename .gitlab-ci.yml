variables:
  IGNORE_TF_DEPRECATION_WARNING: true
  
include:
  template: Terraform/Base.latest.gitlab-ci.yml

stages:
  - validate
  - db
  - db-setup
  - user-rotation
  - cleanup

# validate:
#   extends: .terraform:validate

db-plan:
  stage: db
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/db-infra
    TF_STATE_NAME: rds
  extends: .terraform:build

db-deploy:
  stage: db
  needs: [ db-plan ]
  dependencies: [ db-plan ] 
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/db-infra
    TF_STATE_NAME: rds
  extends: .terraform:deploy
  script:
    - gitlab-terraform apply
    - |
      for i in {1..30}; do
        SECRET_ARN=$(gitlab-terraform output -raw rds_master_secret_arn 2>/dev/null || true)
        if [[ -n "$SECRET_ARN" ]]; then
          echo "Secret ARN is available: $SECRET_ARN"
          break
        fi
        echo "Waiting for secret ARN to become available..."
        sleep 10
      done
      if [[ -z "$SECRET_ARN" ]]; then
        echo "Secret ARN was not available after waiting."
        exit 1
      fi

      # Export all outputs as TF_VAR_ variables to .env
      gitlab-terraform output | while IFS=' = ' read -r key value; do
        # Remove quotes from value if present
        clean_value=$(echo "$value" | sed -e 's/^"//' -e 's/"$//')
        # Only process non-empty keys and values
        if [[ -n "$key" && -n "$clean_value" ]]; then
          echo "TF_VAR_${key}=${clean_value}" >> all_outputs.env
        fi
      done
  artifacts:
    reports:
      dotenv: all_outputs.env
    expire_in: 1 hour


db-setup:
  stage: db-setup
  image: postgres:14
  dependencies: [ db-deploy ]
  script:
    - set -euo pipefail
    - apt-get update && apt-get install -y awscli jq
    - cd db-setup
    - chmod +x setup.sh
    - ./setup.sh
  needs: [ db-deploy ]

lambda-deploy:
  stage: user-rotation
  image: python:3.11
  script:
    - cd user-rotation/lambda
    - pip install --upgrade pip
    - pip install -r requirements.txt -t .
    - git clone --no-checkout https://github.com/jkehler/awslambda-psycopg2.git
    - cd awslambda-psycopg2
    - git sparse-checkout init --cone
    - git sparse-checkout set "psycopg2-3.11"
    - git checkout
    - cd ..
    - cp -r awslambda-psycopg2/psycopg2-3.11/* .
    - apt-get update && apt-get install -y zip
    - zip -r build.zip .
  artifacts:
    paths:
      - user-rotation/
    expire_in: 1 hour

rotation-plan:
  stage: user-rotation
  needs: [ db-deploy, lambda-deploy ]
  dependencies: [ db-deploy, lambda-deploy ]
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/user-rotation
    TF_STATE_NAME: lambda
  extends: .terraform:build

rotation-build:
  stage: user-rotation
  needs: [ rotation-plan, db-deploy ]
  dependencies: [ rotation-plan, db-deploy ]
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/user-rotation
    TF_STATE_NAME: lambda
  extends: .terraform:deploy
  

destroy-rotation-lambda:
  extends: .terraform:destroy

destroy-db:
  extends: .terraform:destroy
  needs: [ destroy-rotation-lambda ]
